<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clean Code | Abre Chaves]]></title>
  <link href="http://abrechaves.github.io/blog/categories/clean-code/atom.xml" rel="self"/>
  <link href="http://abrechaves.github.io/"/>
  <updated>2016-07-15T13:28:26-03:00</updated>
  <id>http://abrechaves.github.io/</id>
  <author>
    <name><![CDATA[Abre Chaves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Smells]]></title>
    <link href="http://abrechaves.github.io/blog/2016/07/14/design-smells/"/>
    <updated>2016-07-14T14:11:24-03:00</updated>
    <id>http://abrechaves.github.io/blog/2016/07/14/design-smells</id>
    <content type="html"><![CDATA[<p align="justify">
    Na minha experiência como desenvolvedor foram inúmeras as vezes que me deparei com design smells. O problema é que muitos desenvolvedores não sabem o que estão fazendo de errado e nem quais consequências terão mediante suas decisões. Precisamos dar nomes a esses bad smells e ter argumentos que dão embassamento à escolha de boas práticas de desenvolvimento. Por isso que como primeiro post do blog decidi dar nomes aos principais mau cheiros do desenvolvimento de software.
</p>


<!-- more -->


<p align="justify">
    São quatro os design smells que vou tratar nesse post: Rigidez, Fragilidade, Imobilidade e Viscosidade.
    Rigidez é quando o custo de uma alteração no software é muito alto do ponto de vista de build, ou seja, quando o tempo de build e de execução da sua suíte de testes é elevado demais. Temos que nos concientizar que um ambiente ideal de desenvolvimento deve dar feedbacks frequentes ao desenvolvedor, e por tanto, os testes devem executar o mais rápido possível, preferencialmente em poucos segundos. Além disso, builds demorados podem onerar o desempenho da IDE utilizada para desenvolvimento.
</p>


<p align="justify">
    Fragilidade é quando alterações em um determinado módulo da aplicação acaba por ocasionar erros e/ou situações inesperadas em outro módulo não diretamente relacionado ao primeiro. Imagine que uma alteração no módulo de RH de um sistema ERP gere erros no módulo de faturamento. Situações como essas colocam em cheque a manutenabilidade do sistema e ainda acabam com a confiança dos desenvolvedores em corrigir bugs e desenvolver novas funcionalidades.
</p>


<p align="justify">
    Se componentes internos à um módulo da aplicação não podem ser facilmente componentizados, extraídos e reutilizados, chamamos o código de imóvel. A principal desvantagem da Imobilidade é a duplicação de código e a dificuldade de dar manutenção ao sistema, visto que algumas alterações devem ser repetidas em diversos pontos diferentes. Não é incomum esquecer de replicar essas alterações ou correções exatamente na primeira funcionalidade que o usuário utilizará assim que a nova versão do sistema ir ao ar.
</p>


<p align="justify">
    Por último, mas não menos importante, temos a Viscosidade. Design smell que ocorre quando operações rotineiras e necessárias ao processo de desenvolvimento são custosos e geralmente tomam tempo demais do desenvolvedor. Por exemplo: Um commit no sistema de controle de versão ocasiona situação de merge complexa e demorada. Essas situações geralmente estão relacionadas a componentes com multiplas responsabilidades e que possuem alto índice de alteração.
</p>


<p align="justify">
    Não deve ser difícil para desenvolvedores encontrarem exemplos com esses no dia-a-dia. O que pode ser díficil é se livrar deles, mesmo que todos estejam fortemente relacionados a problemas de acoplamento. Há diversos princípios e boas práticas que podem nos ajudar nessa tarefa e em próximos posts nós conheceremos os príncipios SOLID, que teem tudo para nos ajudar a nos livrar desses bad smells.
</p>

]]></content>
  </entry>
  
</feed>
